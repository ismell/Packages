%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Java
file_extensions:
  - java
  - bsh
scope: source.java
variables:
  primitives: \b(boolean|byte|char|short|int|float|long|double)\b
  primitives_with_void: \bvoid\b|{{primitives}}

  # source: http://stackoverflow.com/a/5205467/9815
  id: '(?:[\p{L}_$][\p{L}\p{N}_$]*)'
  qualified_id: '(?:(?:{{id}}\.)*{{id}})'
  uppercaseId: '(?:[\p{Lu}][\p{L}\p{N}_$]*)'

  # utility lookaround
  within_generics: '(?:<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)'  # handles 3 levels nesting
  lambda_lookahead: '(\([^)]*\)|{{id}})\s*->'
contexts:
  prototype:
    - include: comments
    - include: illegal-keywords
  any_POP:
    - match: '(?=\S)'
      pop: true
  main:
    - include: package
    - include: import
    - include: body
  package:
    - match: '\bpackage\b'
      scope: keyword.other.package.java
      push:
        - meta_scope: meta.package.java
        - match: '[\w\.]+'
          scope: support.other.package.java
        - match: ;
          scope: punctuation.terminator.java
          pop: true
        - match: (?=\n)
          pop: true
  import:
    - match: \bimport\b
      scope: keyword.other.import.java
      push:
        - meta_scope: meta.import.java
        - match: \bstatic\b
          scope: storage.modifier.static.java
          push:
            - match: '[\w\.]+'
              scope: support.function.import.java
            - match: (?=;)
              pop: true
            - match: (?=\n)
              pop: true
        - match: '[\w\.]+'
          scope: support.class.import.java
        - match: ;
          scope: punctuation.terminator.java
          pop: true
        - match: (?=\n)
          pop: true
  all-types:
    - include: primitive-arrays
    - include: primitive-types
    - include: object-types
  annotations:
    - match: '(@[^ (]+)(\()'
      captures:
        1: storage.type.annotation.java
        2: punctuation.section.parens.begin.java
      push:
        - meta_scope: meta.declaration.annotation.java
        - match: \)
          scope: punctuation.section.parens.end.java
          pop: true
        - match: (\w*)\s*(=)
          captures:
            1: constant.other.key.java
            2: keyword.operator.assignment.java
        - include: code
        - match: ","
          scope: punctuation.separator.property.java
    - match: '@\w*'
      scope: storage.type.annotation.java

  anonymous-classes-and-new:
    - match: \bnew\b
      scope: keyword.control.new.java
      push:
        - meta_scope: annon-class-or-new
        - match: '(?<=\)|\])(?!\s*{)|(?<=})|(?=;)'
          pop: true
        - match: '(\w+)\s*(?=\[)'
          captures:
            1: storage.type.java
          push:
            - meta_scope: new-array-type
            - match: '}|(?=;|\)|,)'
              pop: true
            - match: '\['
              push:
                - meta_scope: nth-dimension-array
                - match: '\]'
                  pop: true
                - include: code
            - match: "{"
              push:
                - meta_scope: array-constructor
                - match: "(?=})"
                  pop: true
                - include: array-construction-block
                - include: code
        - include: object-types
        - match: \(
          push:
            - meta_scope: new-object-params
            - match: \)
              pop: true
            - include: code
        - match: "{"
          push:
            - meta_scope: meta.inner-class.java
            - match: "}"
              pop: true
            - include: class-body
  array-construction-block:
    - match: "{"
      push:
        - meta_scope: array-constructor-block
        - match: "}"
          pop: true
        - include: array-construction-block
        - include: code
  generic-declaration:
    - match: <
      comment: Generic parameter declaration scopes
      scope: punctuation.definition.generic.begin.java
      push:
        - meta_scope: meta.generic.java
        - match: \>
          scope: punctuation.definition.generic.end.java
          pop: true
        - match: \w+
          scope: variable.parameter.type.java
          push: generic-declaration-body
        - match: \,
          scope: punctuation.section.generic.separator.java
  generic-declaration-body:
    - meta_scope: meta.class.generic.extends.java
    - match: (?=,|>)
      pop: true
    - match: extends
      scope: keyword.declaration.extends.java
    - match: super
      scope: keyword.declaration.super.java
    - match: '{{primitives}}'
      scope: invalid.illegal.primitive-instantiation.java
    - include: object-types
  assertions:
    - match: \b(assert)\b
      scope: keyword.control.assert.java
      push:
        - meta_scope: meta.declaration.assertion.java
        - match: $
          pop: true
        - match: ":"
          scope: keyword.operator.assert.expression-separator.java
        - include: code
  body:
    - include: annotations
    - include: class
    # Get modifiers defined on a different line than the class
    - include: storage-modifiers
    - include: stray-braces
  class:
    - match: '(?=\w?[\w\s]*(?:class|(?:@)?interface|enum)\s+\w+)'
      push:
        - meta_scope: meta.class.java
        # Needed because the modifers are part of the meta scope
        - include: storage-modifiers
        - include: generic-declaration
        - match: (\bclass|(?:@)?\binterface|\benum)\s+(\w+)
          scope: meta.class.identifier.java
          captures:
            1: storage.type.java
            2: entity.name.class.java
        - match: \bextends\b
          scope: keyword.declaration.extends.java
          push:
            - meta_scope: meta.class.extends
            - match: '(?=\s*{|\bimplements\b)'
              pop: true
            - include: object-types-inherited
        - match: \b(implements)\b
          scope: keyword.declaration.implements.java
          push:
            - meta_scope: meta.class.implements
            - match: '(?=\bextends\b|\s*\{)'
              pop: true
            - include: object-types-inherited
        - match: "{"
          scope: punctuation.section.class.start.java
          push:
            - meta_scope: meta.class.body.java
            - match: "}"
              scope: punctuation.section.class.end.java
              pop: true
            - include: class-body
        - include: any_POP

  class-body:
    - include: annotations
    - include: class
    - include: static-assignment
    - include: enums
    - include: generic-declaration # for methods
    - include: methods
    # mark constants as constant
    - match: '(\.)?\b(?!UUID\b|URI\b)([A-Z][A-Z0-9_]+)(?!<|\.class|\s*\w+\s*=)\b'
      scope: entity.name.constant
      captures:
        1: punctuation.accessor.dot.java
    - include: constants-and-special-vars
    - include: all-types
    - include: storage-modifiers
    - include: static-code-block
  code:
    - include: constants-and-special-vars
    - include: keywords
    - include: assignment
    - include: lambdas
    - include: strings
    - include: anonymous-classes-and-new
    - include: all-types
    - include: assertions
    - include: generic-declaration
    - include: method-invocations
    - include: code-block-include
    - match: \(
      push:
        - meta_scope: parens-block
        - match: \)
          pop: true
        - include: code
  code-block-include:
    - match: "{"
      scope: punctuation.section.block.begin.java
      push:
        - meta_scope: meta.block
        - match: "}"
          scope: punctuation.section.block.end.java
          pop: true
        - include: code-block
  code-block:
    - include: storage-modifiers
    - include: keywords-control
    - include: catch-block
    - include: code
    - include: code-block-include
    - include: stray-parens
  comments:
    - match: /\*\*/
      scope: comment.block.empty.java punctuation.definition.comment.java
    - include: scope:text.html.javadoc
    - include: comments-inline
  comments-inline:
    - match: /\*
      scope: punctuation.definition.comment.java
      push:
        - meta_scope: comment.block.java
        - match: \*/
          scope: punctuation.definition.comment.java
          pop: true
    - match: //
      scope: punctuation.definition.comment.java
      push:
        - meta_scope: comment.line.double-slash.java
        - match: $\n?
          pop: true
        - match: '(?=%>)'
          pop: true
  constants-and-special-vars:
    - match: \b(true|false|null)\b
      scope: constant.language.java
    - match: \b(this|super)\b
      scope: variable.language.java
    - match: '\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)([LlFfUuDd]|UL|ul)?\b'
      scope: constant.numeric.java
    - match: '(\.)?\b(?!UUID\b|URI\b)([A-Z][A-Z0-9_]+)(?!<|\.class|\s*\w+\s*=)\b'
      scope: constant.other.java #variable.other.constant
      captures:
        1: punctuation.accessor.dot.java
  enums:
    - match: '^(?=\s*[A-Z0-9_]+\s*({|\(|,|;))'
      push:
        - match: "(?=;|})"
          pop: true
        - match: \w+
          scope: constant.other.enum.java
          push:
            - meta_scope: meta.enum.java
            - match: "(?=,|;|})"
              pop: true
            - include: parens
            - match: "{"
              push:
                - match: "}"
                  pop: true
                - include: class-body
  keywords:
    - match: '::'
      scope: punctuation.accessor.double-colon.java
      push:
        - match: '{{id}}'
          scope: variable.function.reference.java
          pop: true
        - match: (?=\S)
          pop: true
    - match: '\?|:'
      scope: keyword.control.java
    - match: \b(instanceof)\b
      scope: keyword.operator.java
    - match: (?<!\.)(==|!=|<=|>=|<>|<|>)
      scope: keyword.operator.comparison.java
    # - match: (=)
    #   scope: keyword.operator.assignment.java standalone
    - match: (\-\-|\+\+)
      scope: keyword.operator.increment-decrement.java
    - match: (\-|\+|\*|\/|%)
      scope: keyword.operator.arithmetic.java
    - match: (!|&&|\|\|)
      scope: keyword.operator.logical.java
    - match: (\.)(class\b)?
      captures:
        1: punctuation.accessor.dot.java
        2: support.variable.magic.java
    - match: ;
      scope: punctuation.terminator.java
  illegal-keywords:
    - match: \b(goto|const)\b
      scope: invalid.illegal.java
  catch-block:
    - match: \b(catch)\s*\(
      captures:
        1: keyword.control.catch-exception.java
      push:
        - match: \)
          pop: true
        - include: parameters
  keywords-control:
    - match: \b(try|finally|throw)\b
      scope: keyword.control.catch-exception.java
    - match: \b(return|break|case|continue|default|do|while|for|switch|if|else)\b
      scope: keyword.control.java
  method-invocations:
    - match: ({{id}})\s*(\()
      captures:
        1: variable.function.java
        2: punctuation.section.parens.begin.java
      push:
        - meta_scope: meta.function-call.java
        - match: \)
          scope: punctuation.section.parens.end.java
          pop: true
        - match: ;
          scope: invalid.illegal.stray-terminator-end
          pop: true
        - include: code
        - match: \,
          scope: punctuation.separator.java

  methods:
    - match: (?={{id}}\()
      push:
        - meta_scope: meta.method.java
        - match: ({{uppercaseId}})\s*(?=\()
          captures:
            1: meta.method.identifier.java entity.name.function.constructor.java
        - match: ({{id}})\s*(?=\()
          captures:
            1: meta.method.identifier.java entity.name.function.java
        - match: \(
          scope: punctuation.section.parens.begin.java
          push:
            - meta_scope: meta.method.parameters.java meta.parens
            - match: \)
              scope: punctuation.section.parens.end.java
              pop: true
            - include: parameters
            - match: \S
              scope: invalid.illegal.missing-parameter-end
              pop: true
        - include: throws
        - match: "{"
          scope: punctuation.definition.method.start.java
          push:
            - meta_scope: meta.method.body.java
            - match: "}"
              scope: punctuation.definition.method.end.java
              pop: true
            - include: code-block
        - include: any_POP
  invalid-generic-tags:
    - match: <
      comment: This is just to support <>'s with no actual type prefix
      push:
        - meta_scope: invalid.generic
        - match: '>|[^\w\s,\[\]<]'
          pop: true
  object-types:
    - match: '\b((?:[a-zA-Z]\w*(\.))*[A-Z]\w*)(<)'
      captures:
        1: support.class.java
        2: punctuation.accessor.dot.java
        3: punctuation.definition.generic.begin.java
      push: object-type-generic
    - match: '\b((?:[a-zA-Z]\w*\.)*[A-Z]+\w*)(?=\[)'
      push:
        - meta_scope: storage.type.object.array.java
        - match: '(?=[^\]\s])'
          pop: true
        - match: '\['
          push:
            - match: '\]'
              pop: true
            - include: code
    - match: '\b(?:[a-zA-Z]\w*(\.))*(?:(?=UUID\b|URI\b)|(?![A-Z0-9_]{2,}\b))[A-Z]\w*\b'
      scope: support.class.java
      captures:
        1: punctuation.accessor.dot.java
  object-types-inherited:
    - match: '\b((?:[a-zA-Z]\w*(\.))*[A-Z]+\w*)(<)'
      captures:
        1: entity.other.inherited-class.java
        2: punctuation.accessor.dot.java
        3: punctuation.definition.generic.begin.java
      push: object-type-generic
    - match: '\b(?:[a-zA-Z]\w*(\.))*[A-Z]+\w*'
      scope: entity.other.inherited-class.java
      captures:
        1: punctuation.accessor.dot.java
  object-type-generic:
    - meta_scope: meta.generic.java
    - match: ">"
      scope: punctuation.definition.generic.end.java
      pop: true
    - match: \?
      scope: keyword.operator.wildcard.java
      push: generic-declaration-body
    - match: \,
      scope: punctuation.section.generic.separator.java
    - match: '{{primitives}}'
      scope: invalid.illegal.primitive-instantiation.java
    - include: object-types
    - include: invalid-generic-tags
  throws:
    - match: \bthrows\b
      scope: storage.modifier.java
      push:
        - meta_scope: meta.method.throws.java
        - match: '(?=\s*{|;)'
          pop: true
        - include: object-types
  parameters:
    - match: \bfinal\b
      scope: storage.modifier.java
    - include: annotations
    - include: primitive-arrays
    - include: primitive-types
    - include: object-types
    - match: \.\.\.
      scope: storage.modifier.variable-arity
    - match: \w+
      scope: variable.parameter.java
    - match: \,
      scope: punctuation.separator.java

  raw-parameters:
    - match: \bfinal\b
      scope: storage.modifier.java
    - match: '{{primitives}}'
      scope: storage.type.primitive.java
      set: raw-parameter-after
    - match: '{{qualified_id}}'
      scope: support.class.java
      set: raw-parameter-after
    - match: ','
      scope: punctuation.separator.java
    - match: '(?=\))'
      pop: true
  raw-parameter-after:
    - match: '<'
      scope: punctuation.definition.generic.begin.java
      push:
        - meta_scope: meta.generic.java
        - match: '>'
          scope: punctuation.definition.generic.end.java
          pop: true
        - include: generic-instantiation
    - match: '\.\.\.'
      scope: keyword.operator.varargs.java
    - match: '(\[)\s*(\])'
      captures:
        1: punctuation.section.brackets.begin.java
        2: punctuation.section.brackets.end.java
    - match: '{{id}}'
      scope: variable.parameter.java
      set: raw-parameters
    - match: (?=\S)
      pop: true

  lambdas:
    - match: '(?={{lambda_lookahead}})'
      push: lambda-params

  lambda-params:
    - meta_scope: meta.lambda.parameters.java
    - match: \(
      scope: punctuation.section.parens.begin.java
      set:
        - meta_scope: meta.lambda.parameters.paren.java
        - match: \)
          scope: punctuation.section.parens.end.java
          set: lambda-arrow
        - match: (?=(\s*{{id}}\s*,)*\s*{{id}}\s*\))
          push: lambda-params-simple
        - match: (?=\S)
          push: raw-parameters
    - match: '{{id}}'
      scope: variable.parameter.java
      set: lambda-arrow

  lambda-params-simple:
    - match: '{{id}}'
      scope: variable.parameter.java
    - match: ','
      scope: punctuation.separator.java
    - match: (?=\S)
      pop: true

  lambda-arrow:
    - match: ->
      scope: storage.type.lambda.java
      set:
        - meta_scope: meta.lambda.body.java
        - match: (?=[)};])
          pop: true
        - include: code

  parens:
    - match: \(
      scope: punctuation.section.group.begin
      push:
        - meta_scope: meta.group
        - match: \)
          scope: punctuation.section.group.end
          pop: true
        - include: code
  primitive-arrays:
    - match: '\b(?:void|boolean|byte|char|short|int|float|long|double)(\[\])+'
      scope: storage.type.primitive.array.java
      captures:
        1: keyword.operator.array.java
  primitive-types:
    - match: '{{primitives_with_void}}'
      scope: storage.type.primitive.java
  static-assignment:
    - match: \=
      scope: keyword.operator.assignment.java
      push:
        - meta_scope: meta.assignment.rhs.java static
        - match: (?=;)
          pop: true
        - include: code
        - include: stray-parens
    - match: ;
      scope: punctuation.terminator.java
  assignment:
    - match: \=
      scope: keyword.operator.assignment.java
      push:
        - meta_scope: meta.assignment.rhs.java
        - match: '(?=;|\)|\})'
          pop: true
        - include: code
  static-code-block:
    - match: "{"
      push:
        - meta_scope: meta.static.body.java
        - match: "}"
          pop: true
        - include: code-block
  storage-modifiers:
    - match: \b(public|private|protected|static|final|native|synchronized|strictfp|abstract|threadsafe|transient|default|volatile)\b
      scope: storage.modifier.java
  stray-braces:
    - match: '\}'
      scope: invalid.illegal.stray-brace-end
  stray-parens:
    - match: \)
      scope: invalid.illegal.stray-parens-end
  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.java
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.java
        - match: '"'
          scope: punctuation.definition.string.end.java
          pop: true
        - match: \\.
          scope: constant.character.escape.java
    - match: "'"
      scope: punctuation.definition.string.begin.java
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.single.java
        - match: "'"
          scope: punctuation.definition.string.end.java
          pop: true
        - match: \\.
          scope: constant.character.escape.java
  values:
    - include: strings
    - include: object-types
    - include: constants-and-special-vars
